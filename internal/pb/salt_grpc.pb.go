// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/pb/salt.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaltServiceClient is the client API for SaltService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaltServiceClient interface {
	GenerateSalt(ctx context.Context, in *GenerateSaltRequest, opts ...grpc.CallOption) (*GenerateSaltResponse, error)
}

type saltServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaltServiceClient(cc grpc.ClientConnInterface) SaltServiceClient {
	return &saltServiceClient{cc}
}

func (c *saltServiceClient) GenerateSalt(ctx context.Context, in *GenerateSaltRequest, opts ...grpc.CallOption) (*GenerateSaltResponse, error) {
	out := new(GenerateSaltResponse)
	err := c.cc.Invoke(ctx, "/salt.SaltService/GenerateSalt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaltServiceServer is the server API for SaltService service.
// All implementations should embed UnimplementedSaltServiceServer
// for forward compatibility
type SaltServiceServer interface {
	GenerateSalt(context.Context, *GenerateSaltRequest) (*GenerateSaltResponse, error)
}

// UnimplementedSaltServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSaltServiceServer struct {
}

func (UnimplementedSaltServiceServer) GenerateSalt(context.Context, *GenerateSaltRequest) (*GenerateSaltResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSalt not implemented")
}

// UnsafeSaltServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaltServiceServer will
// result in compilation errors.
type UnsafeSaltServiceServer interface {
	mustEmbedUnimplementedSaltServiceServer()
}

func RegisterSaltServiceServer(s grpc.ServiceRegistrar, srv SaltServiceServer) {
	s.RegisterService(&SaltService_ServiceDesc, srv)
}

func _SaltService_GenerateSalt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSaltRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaltServiceServer).GenerateSalt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/salt.SaltService/GenerateSalt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaltServiceServer).GenerateSalt(ctx, req.(*GenerateSaltRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaltService_ServiceDesc is the grpc.ServiceDesc for SaltService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaltService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "salt.SaltService",
	HandlerType: (*SaltServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateSalt",
			Handler:    _SaltService_GenerateSalt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/salt.proto",
}
